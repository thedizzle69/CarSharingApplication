### Wrong Login Attempt: Expected 401 Unauthorized
POST http://localhost:8080/api/users/login
Content-Type: application/json

{
  "username": "WrongUser",
  "password": "WrongPassword"
}

### Register a normal user (Driver): Expected 201 Created
POST http://localhost:8080/api/users/register
Content-Type: application/json

{
  "username": "BMWDriver1",
  "password": "NoTurnSignal123",
  "role": "driver"
}

### Login as driver (Retrieve Token): Expected 200 OK
POST http://localhost:8080/api/users/login
Content-Type: application/json

{
  "username": "BMWDriver1",
  "password": "NoTurnSignal123"
}

> {%
    client.global.set("driver_token", response.body.token || "mock_driver_token");
%}


### Retrieve all vehicles (Should work for both roles): Expected 200 OK
GET http://localhost:8080/api/vehicles
Authorization: Bearer {{driver_token}}

### Driver trying to retrieve all users (Should fail): Expected 403 Forbidden
GET http://localhost:8080/api/users
Authorization: Bearer {{driver_token}}

### Retrieve a specific vehicle by ID: Expected 404 Not Found
GET http://localhost:8080/api/vehicles/1
Authorization: Bearer {{driver_token}}

### Driver trying to update a vehicle (Should fail): Expected 403 Forbidden
PUT http://localhost:8080/api/vehicles/1
Content-Type: application/json
Authorization: Bearer {{driver_token}}

{
  "name": "Updated BMW",
  "description": "Driver should not be able to do this"
}

### Driver trying to delete a vehicle (Should fail): Expected 403 Forbidden
DELETE http://localhost:8080/api/vehicles/1
Authorization: Bearer {{driver_token}}



### Register a new fleet-manager: Expected 201 Created
POST http://localhost:8080/api/users/register
Content-Type: application/json

{
  "username": "BigBoss1",
  "password": "BossPW123",
  "role": "fleet-manager"
}

### Login as fleet manager (Retrieve Token): Expected 200 OK
POST http://localhost:8080/api/users/login
Content-Type: application/json

{
  "username": "BigBoss1",
  "password": "BossPW123"
}

> {%
    client.global.set("fleet_manager_token", response.body.token || "mock_fleet_manager_token");
%}


### Retrieve all vehicles (Should work for both roles): Expected 200 OK
GET http://localhost:8080/api/vehicles
Authorization: Bearer {{fleet_manager_token}}

### Fleet manager retrieves all users: Expected 200 OK
GET http://localhost:8080/api/users
Authorization: Bearer {{fleet_manager_token}}

### Fleet manager registers a new vehicle: Expected 201 Created
POST http://localhost:8080/api/vehicles
Content-Type: application/json
Authorization: Bearer {{fleet_manager_token}}

{
  "id": 1,
  "name": "3er BMW",
  "description": "Bavarian car",
  "latitude": 42.0169,
  "longitude": 16.3738,
  "state": "free",
  "currentDriver": null,
  "vehicleToken": "BMW123"
}

### Retrieve a specific vehicle by ID: Expected 200 OK
GET http://localhost:8080/api/vehicles/1
Authorization: Bearer {{fleet_manager_token}}

### Fleet manager updates a vehicle
PUT http://localhost:8080/api/vehicles/1
Content-Type: application/json
Authorization: Bearer {{fleet_manager_token}}

{
  "name": "Updated BMW",
  "description": "Updated description",
  "latitude": 42.0169,
  "longitude": 16.3738,
  "state": "occupied",
  "currentDriver": "BMWDriver1",
  "vehicleToken": "BMW456"
}

### Fleet manager deletes a vehicle: Expected 204 No Content
DELETE http://localhost:8080/api/vehicles/1
Authorization: Bearer {{fleet_manager_token}}